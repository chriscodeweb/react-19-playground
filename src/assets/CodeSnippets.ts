export const CODE_SNIPPETS = {
  "UseExample4": "import { createContext, useState, useContext, ReactNode } from 'react';\r\n\r\n// Define the type for the theme context\r\ntype ThemeContextType = {\r\n  theme: string;\r\n  toggleTheme: () => void;\r\n};\r\n\r\n// Create a context for the theme with an initial value\r\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\r\n\r\n// Define the props for the ThemeProvider component\r\ninterface ThemeProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\n// Theme provider to manage and provide the current theme\r\nconst ThemeProvider = ({ children }: ThemeProviderProps) => {\r\n  const [theme, setTheme] = useState<string>('light'); // Initial theme is 'light'\r\n\r\n  // Toggle between 'light' and 'dark' themes\r\n  const toggleTheme = () => {\r\n    setTheme((prevTheme) => (prevTheme === 'light' ? 'dark' : 'light'));\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to consume the theme context\r\nconst useTheme = () => {\r\n  const context = useContext(ThemeContext);\r\n  if (context === undefined) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// Component using `useTheme` to consume the theme context\r\nconst ThemedCard = () => {\r\n  const { theme, toggleTheme } = useTheme();\r\n\r\n  return (\r\n    <div\r\n      className={`shadow-md rounded-lg p-6 ${\r\n        theme === 'light' ? 'bg-white' : 'bg-[#1B1D25]'\r\n      }`}\r\n    >\r\n      {/* Dynamic styling based on the current theme */}\r\n      <h1\r\n        className={`text-2xl mb-3 ${\r\n          theme === 'light' ? 'text-gray-800' : 'text-white'\r\n        }`}\r\n      >\r\n        Themed Card\r\n      </h1>\r\n      <p className={theme === 'light' ? 'text-gray-800' : 'text-white'}>\r\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non neque\r\n        libero. Nullam mattis metus a sapien tempor, sit amet mollis est\r\n        facilisis. Phasellus nec turpis nec dui venenatis vestibulum. Sed\r\n        dapibus dapibus justo, at rhoncus risus malesuada vel. Proin eget leo id\r\n        mi ullamcorper rhoncus.\r\n      </p>\r\n      {/* Button to toggle theme */}\r\n      <button\r\n        onClick={toggleTheme}\r\n        className='mt-4 px-4 py-2 bg-indigo-500 hover:bg-indigo-600 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-blue-600'\r\n      >\r\n        {theme === 'light' ? 'Switch to Dark Mode' : 'Switch to Light Mode'}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Main component rendering the theme provider and themed card\r\nconst Theme = () => {\r\n  return (\r\n    <div className='relative mt-6 mx-8'>\r\n      <ThemeProvider>\r\n        <ThemedCard />\r\n      </ThemeProvider>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { Theme as UseExample4 };",
  "UseExample2": "import { use, Suspense } from 'react';\r\n\r\n// Function to fetch resources with caching\r\nconst cache = new Map();\r\n\r\n// Function to fetch resources with caching\r\nfunction fetchResource(url: string): Promise<any> {\r\n  // If the URL is not cached, fetch the data and store the promise in the cache\r\n  if (!cache.has(url)) {\r\n    const promise = fetch(url).then((res) => res.json());\r\n    cache.set(url, promise);\r\n  }\r\n\r\n  // Return the cached promise\r\n  return cache.get(url);\r\n}\r\n\r\n// Component to display a list of posts\r\ninterface Post {\r\n  id: number;\r\n  title: string;\r\n  body: string;\r\n}\r\n\r\nconst PostItems: React.FC = () => {\r\n  // Use the new `use()` API to handle the async fetch operation\r\n  const posts: Post[] = use(fetchResource('https://jsonplaceholder.typicode.com/posts'));\r\n\r\n  return (\r\n    <ul className='px-8 max-h-[400px] overflow-y-scroll rounded-2xl py-3 bg-[#1B1D25]'>\r\n      {posts.map((post) => (\r\n        <div\r\n          key={post.id}\r\n          className='text-white border shadow-md p-4 my-6 rounded-lg'\r\n        >\r\n          <h2 className='text-xl font-bold'>{post.title}</h2>\r\n          <p>{post.body}</p>\r\n        </div>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\n// Component wrapping the list of posts with Suspense for fallback UI\r\nconst Posts: React.FC = () => {\r\n  return (\r\n    <div className='mt-6 mx-8 relative'>\r\n      <Suspense\r\n        fallback={\r\n          // Display a loading indicator while the data is being fetched\r\n          <h1 className='text-2xl text-center text-white font-bold mt-5'>Loading...</h1>\r\n        }\r\n      >\r\n        {/* Render the resolved posts */}\r\n        <PostItems />\r\n      </Suspense>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { Posts as UseExample2 };",
  "UseExample3": "import { use, useState, Suspense } from 'react';\r\n\r\n// Simulated async function to fetch a message\r\nfunction fetchMessage(): Promise<string> {\r\n  return new Promise((resolve) => setTimeout(resolve, 1000, ''));\r\n}\r\n\r\n// Component to display the message once it resolves\r\ninterface MessageOutputProps {\r\n  messagePromise: Promise<string>;\r\n}\r\n\r\nconst MessageOutput: React.FC<MessageOutputProps> = ({ messagePromise }) => {\r\n  // Using React 19's `use()` API to directly handle the promise\r\n  const messageContent = use(messagePromise);\r\n\r\n  return (\r\n    <p className=\"text-xl relative text-white bg-[#1B1D25] w-fit p-6 rounded-lg shadow-md\">\r\n      Here is the message: {messageContent}\r\n    </p>\r\n  );\r\n};\r\n\r\n// Container component with a Suspense fallback for loading state\r\ninterface MessageContainerProps {\r\n  messagePromise: Promise<string>;\r\n}\r\n\r\nconst MessageContainer: React.FC<MessageContainerProps> = ({ messagePromise }) => {\r\n  return (\r\n    <Suspense\r\n      fallback={\r\n        <p className=\"text-xl text-white\"> Downloading message...</p>\r\n      }\r\n    >\r\n      {/* Render the resolved message */}\r\n      <MessageOutput messagePromise={messagePromise} />\r\n    </Suspense>\r\n  );\r\n};\r\n\r\n// Main component to manage user interaction and state\r\nconst Message: React.FC = () => {\r\n  const [messagePromise, setMessagePromise] = useState<Promise<string> | null>(null);\r\n  const [show, setShow] = useState(false);\r\n\r\n  // Function to trigger message fetching\r\n  function download() {\r\n    setMessagePromise(fetchMessage());\r\n    setShow(true);\r\n  }\r\n\r\n  return (\r\n    <div className=\"relative mx-8 mt-6\">\r\n      <div className=\"flex justify-center items-center bg-[#1B1D25] p-12 rounded-2xl\">\r\n        {show ? (\r\n          // Show the message container if the user has triggered the download\r\n          <MessageContainer messagePromise={messagePromise as Promise<string>} />\r\n        ) : (\r\n          // Show the download button initially\r\n          <button\r\n            className=\"bg-indigo-500 text-white font-bold py-2 px-4 rounded-full\"\r\n            onClick={download}\r\n          >\r\n            Download message\r\n          </button>\r\n        )}\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { Message as UseExample3 };",
  "UseExample1": "import { use, Suspense } from 'react';\n\n// Interface for the joke data structure\ninterface JokeData {\n  id: string;\n  value: string;\n  url: string;\n  created_at: string;\n  updated_at: string;\n  categories: string[];\n}\n\n// Type for the cache map\ntype CacheMap = Map<string, JokeData>;\n\n// A memoized function to fetch data and cache it locally\nconst fetchData = (() => {\n  const cache: CacheMap = new Map();\n\n  return async (): Promise<JokeData> => {\n    const url = 'https://api.chucknorris.io/jokes/random';\n\n    // Check if the data is already cached\n    if (cache.has(url)) {\n      return cache.get(url)!; // Using non-null assertion as we've checked existence\n    }\n\n    // Fetch new data if not cached\n    const res = await fetch(url, { cache: 'no-store' }); // Avoid stale data with 'no-store'\n    const data: JokeData = await res.json();\n\n    // Cache the fetched data\n    cache.set(url, data);\n    return data;\n  };\n})();\n\n// Component using the new `use()` API to handle async data directly in components\nconst JokeItem: React.FC = () => {\n  // The `use()` API allows you to call promises directly within components\n  // It will suspend the rendering of this component until the promise resolves\n  const joke: JokeData = use(fetchData());\n  \n  return (\n    <div className='bg-[#1B1D25] shadow-md p-4 my-6 rounded-lg text-white'>\n      {/* Display the joke */}\n      <h2 className='text-xl'>{joke.value}</h2>\n    </div>\n  );\n};\n\n  string: string;\n}\n\n// Wrapper component using Suspense for fallback rendering\nconst Joke: React.FC = () => {\n  return (\n    <div className='mt-6 relative mx-8'>\n      <Suspense\n        fallback={\n          // Fallback UI while waiting for JokeItem to resolve its data\n          <h2 className='text-2xl text-center text-white font-bold mt-5'>Loading...</h2>\n        }\n      >\n        {/* Add meta data for SEO purposes */}\n        {/* React 19 now has support for rendering document metadata tags in components natively: */}\n        <title>Chuck Norris Jokes</title>\n        <meta name='description' content='Chuck Norris jokes' />\n        <meta name='keywords' content='chuck norris, jokes' />\n\n        {/* Render the joke */}\n        <JokeItem />\n      </Suspense>\n\n    </div>\n  );\n};\n\nexport { Joke as UseExample1 };",
  "AddToCartForm": "import { useActionState } from 'react';\n\nenum Status {\n  Success = 'success',\n  Failure = 'failure',\n}\ninterface FormState {\n  message: string;\n  status: Status;\n}\ninterface AddToCartFormProps {\n  itemID: string;\n  itemTitle: string;\n}\n\n// Action function to handle form submissions\n// Takes the previous state and query data as parameters\nconst addToCart = (prevState: FormState | null, queryData: FormData): FormState => {\n  const itemID = queryData.get('itemID') as string;\n\n  // Return different states based on the itemID\n  if (itemID === '1') {\n    return { ...prevState, message: 'Added to cart!', status: Status.Success };\n  } else {\n    return {...prevState, message: 'Out of stock!', status: Status.Failure };\n  }\n};\n\n// Form component for adding items to the cart\nconst AddToCartForm: React.FC<AddToCartFormProps> = ({ itemID, itemTitle }) => {\n  // `useActionState` provides the current state and an action function\n  const [formState, formAction] = useActionState(addToCart, null);\n\n  return (\n    <form\n      action={formAction}\n      className='bg-[#1B1D25] border shadow-md text-white rounded-2xl px-8 pt-6 pb-4 mb-4 relative mt-6 mx-8'\n    >\n      {/* Display the item title */}\n      <h2 className='text-xl font-bold mb-4'>{itemTitle}</h2>\n\n      {/* Hidden input for item ID */}\n      <input type='hidden' name='itemID' value={itemID} />\n\n      {/* Submit button */}\n      <button\n        type='submit'\n        className='bg-indigo-500 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-full focus:outline-none focus:shadow-outline'\n      >\n        Add to Cart\n      </button>\n\n      {/* Display feedback based on formState */}\n      <div\n        className={`mt-4 text-sm ${formState?.status === Status.Success ? 'text-green-400' : 'text-red-400'\n          }`}\n      >\n        {formState?.message}\n      </div>\n    </form>\n  );\n};\n\nexport default AddToCartForm;\n",
  "ActionExample2": "import { useState } from 'react';\r\n\r\n// React 19 introduces an updated formAction prop, allowing developers to handle form submissions natively.\r\n// This ensures a more declarative approach while reducing the need for manual event listeners or handling.\r\n\r\n// Interface for Cart Item\r\ninterface CartItem {\r\n  id: string;\r\n  title: string;\r\n}\r\n\r\n// Component for displaying cart contents\r\nconst CartDisplay = ({ cart }: { cart: CartItem[] }) => {\r\n  // Early return ensures no unnecessary DOM rendering for an empty cart\r\n  if (cart.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className='px-8 text-indigo-300'>\r\n      <h2 className='text-xl font-bold my-4'>Your Cart</h2>\r\n      <ul>\r\n        {cart.map((item, index) => (\r\n          <li key={index}>{item.title}</li>\r\n        ))}\r\n      </ul>\r\n      <hr className='my-4' />\r\n    </div>\r\n  );\r\n};\r\n\r\n// Interface for AddToCartForm Props\r\ninterface AddToCartFormProps {\r\n  id: string;\r\n  title: string;\r\n  addToCart: (formData: FormData, title: string) => Promise<{ id: string }>;\r\n}\r\n\r\n// Component for adding items to the cart\r\nconst AddToCartForm = ({ id, title, addToCart }: AddToCartFormProps) => {\r\n  // The formAction function receives form data directly, enabling modern handling of form submissions.\r\n  const formAction = async (formData: FormData) => {\r\n    try {\r\n      await addToCart(formData, title);\r\n    } catch (error) {\r\n      console.error('Error adding item to cart:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form\r\n      action={formAction}\r\n      className='bg-[#1B1D25] border shadow-md text-white rounded-2xl px-8 pt-6 pb-8 mb-4 relative mt-6 mx-8'\r\n    >\r\n      <h2 className='text-xl font-bold mb-4'>{title}</h2>\r\n      {/* Hidden input ensures item ID is included in formData */}\r\n      <input type='hidden' name='itemID' value={id} />\r\n      <button\r\n        type='submit'\r\n        className='bg-indigo-500 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-full focus:outline-none focus:shadow-outline'\r\n      >\r\n        Add to Cart\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\n// Main component managing the shopping cart\r\nconst ShoppingCart = () => {\r\n  const [cart, setCart] = useState<CartItem[]>([]);\r\n\r\n  // React 19 promotes the use of async logic in state-updating functions for smoother UX\r\n  const addToCart = async (formData: FormData, title: string): Promise<{ id: string }> => {\r\n    const id = String(formData.get('itemID'));\r\n\r\n    // Simulate an asynchronous API call with a delay\r\n    await new Promise((resolve) => setTimeout(resolve, 1000));\r\n\r\n    // Append the new item to the cart\r\n    setCart((prevCart) => [...prevCart, { id, title }]);\r\n\r\n    return { id }; // Return object for potential additional handling\r\n  };\r\n\r\n  return (\r\n    <div className=\"relative mx-8 mt-6\">\r\n      <div className='bg-[#1B1D25] py-6 px-2 rounded-2xl'>\r\n        {/* Display current cart contents */}\r\n        <CartDisplay cart={cart} />\r\n\r\n        {/* Example forms for adding items to the cart */}\r\n        <AddToCartForm\r\n          id='1'\r\n          title='JavaScript: The Good Parts'\r\n          addToCart={addToCart}\r\n        />\r\n        <AddToCartForm\r\n          id='2'\r\n          title='5000 V-Bucks Gift Card'\r\n          addToCart={addToCart}\r\n        />\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { ShoppingCart as ActionExample2 };",
  "ActionExample1": "import { useState } from 'react';\r\n\r\n// Interface for Post\r\ninterface Post {\r\n  title: string;\r\n  body: string;\r\n}\r\n\r\n// Component for displaying individual posts\r\nconst PostItem = ({ post }: { post: Post }) => {\r\n  return (\r\n    <div className='bg-[#1B1D25] text-white shadow-md p-6 my-6 rounded-2xl'>\r\n      {/* Post title */}\r\n      <h2 className='text-xl font-bold capitalize'>{post.title}</h2>\r\n      {/* Post body */}\r\n      <p>{post.body}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Component for adding new posts\r\ninterface PostFormProps {\r\n  addPost: (newPost: Post) => void;\r\n}\r\n\r\nconst PostForm = ({ addPost }: PostFormProps) => {\r\n  // formAction handles the form submission and calls addPost with the new post data\r\n  const formAction = async (formData: FormData) => {\r\n    const newPost: Post = {\r\n      title: formData.get('title') as string,\r\n      body: formData.get('body') as string,\r\n    };\r\n\r\n    // Ensure both fields are filled out before adding the post\r\n    if (newPost.title && newPost.body) {\r\n      addPost(newPost);\r\n    } else {\r\n      console.warn('Both title and body are required to create a post.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form\r\n      action={formAction}\r\n      className='bg-[#1B1D25] shadow-md px-8 pt-6 pb-8 mb-4 mt-6 rounded-2xl relative'\r\n    >\r\n      {/* Input field for post title */}\r\n      <div className='mb-4'>\r\n        <label\r\n          className='block text-white text-sm font-bold mb-2'\r\n          htmlFor='title'\r\n        >\r\n          Title\r\n        </label>\r\n        <input\r\n          className='shadow appearance-none border rounded w-full py-2 px-3 bg-[#1B1D25] text-white leading-tight focus:outline-none focus:shadow-outline'\r\n          id='title'\r\n          type='text'\r\n          placeholder='Enter title'\r\n          name='title'\r\n        />\r\n      </div>\r\n\r\n      {/* Textarea for post body */}\r\n      <div className='mb-6'>\r\n        <label\r\n          className='block text-white text-sm font-bold mb-2'\r\n          htmlFor='body'\r\n        >\r\n          Body\r\n        </label>\r\n        <textarea\r\n          className='shadow appearance-none border rounded w-full py-2 px-3 bg-[#1B1D25] text-white leading-tight focus:outline-none focus:shadow-outline'\r\n          id='body'\r\n          rows={5}\r\n          placeholder='Enter body'\r\n          name='body'\r\n        ></textarea>\r\n      </div>\r\n\r\n      {/* Submit button */}\r\n      <div className='flex items-center justify-between'>\r\n        <button\r\n          className='bg-indigo-500 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-full focus:outline-none focus:shadow-outline'\r\n          type='submit'\r\n        >\r\n          Submit\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\n// Main component to manage and display posts\r\nconst Posts = () => {\r\n  const [posts, setPosts] = useState<Post[]>([]);\r\n\r\n  // Adds a new post to the list\r\n  const addPost = (newPost: Post) => {\r\n    setPosts((prevPosts) => [...prevPosts, newPost]);\r\n  };\r\n\r\n  return (\r\n    <div className='relative mx-8 mt-6'>\r\n      <div>\r\n        {/* Form to create new posts */}\r\n        <PostForm addPost={addPost} />\r\n\r\n        {/* List of posts */}\r\n        {posts.map((post, index) => (\r\n          <PostItem key={index} post={post} />\r\n        ))}\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { Posts as ActionExample1};"
};